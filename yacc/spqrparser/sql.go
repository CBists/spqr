// Code generated by goyacc -o yacc/spqrparser/sql.go -p yy yacc/spqrparser/sql.y. DO NOT EDIT.

//line yacc/spqrparser/sql.y:3

package spqrparser

import __yyfmt__ "fmt"

//line yacc/spqrparser/sql.y:4

import (
	"strconv"
)

//line yacc/spqrparser/sql.y:15
type yySymType struct {
	yys       int
	empty     struct{}
	statement Statement
	show      *Show
	kr        *KeyRange
	sh_col    *ShardingColumn
	kill      *Kill
	drop      *Drop
	lock      *Lock
	shutdown  *Shutdown
	unlock    *Unlock
	split     *SplitKeyRange
	str       string
	byte      byte
	int       int
	bool      bool
}

const STRING = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const POOLS = 57350
const STATS = 57351
const LISTS = 57352
const SERVERS = 57353
const CLIENTS = 57354
const DATABASES = 57355
const CREATE = 57356
const SHARDING = 57357
const COLUMN = 57358
const ADD = 57359
const KEY = 57360
const RANGE = 57361
const SHARDS = 57362
const KEY_RANGES = 57363
const DROP = 57364
const LOCK = 57365
const UNLOCK = 57366
const SHUTDOWN = 57367
const SPLIT = 57368
const BY = 57369
const FROM = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"STRING",
	"COMMAND",
	"SHOW",
	"KILL",
	"POOLS",
	"STATS",
	"LISTS",
	"SERVERS",
	"CLIENTS",
	"DATABASES",
	"CREATE",
	"SHARDING",
	"COLUMN",
	"ADD",
	"KEY",
	"RANGE",
	"SHARDS",
	"KEY_RANGES",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SHUTDOWN",
	"SPLIT",
	"BY",
	"FROM",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacc/spqrparser/sql.y:248

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 67

var yyAct = [...]int{
	52, 54, 17, 18, 26, 59, 64, 49, 48, 47,
	12, 30, 35, 21, 33, 32, 31, 46, 22, 23,
	24, 19, 20, 34, 36, 45, 29, 43, 42, 41,
	40, 39, 44, 27, 55, 53, 63, 51, 25, 1,
	62, 50, 11, 10, 15, 38, 6, 16, 56, 57,
	58, 7, 14, 5, 13, 4, 60, 3, 9, 8,
	61, 37, 28, 65, 2, 0, 66,
}

var yyPact = [...]int{
	-4, -1000, -25, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 18, -1000, -1000, -1000, -1000, 3, 3, -1000,
	13, 12, 11, 10, 9, -1000, -1000, 16, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6,
	-2, -10, -11, -12, 33, 31, 30, 31, 31, 31,
	-1000, -1000, -23, -1000, 30, -1000, -1000, -1000, -1000, 31,
	32, -21, 31, -1000, 30, -1000, -1000,
}

var yyPgo = [...]int{
	0, 64, 62, 61, 59, 58, 57, 55, 54, 53,
	52, 51, 47, 46, 44, 43, 42, 26, 41, 40,
	1, 0, 39, 38,
}

var yyR1 = [...]int{
	0, 22, 23, 23, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 17, 17, 17, 17, 17, 17, 17,
	2, 3, 4, 18, 20, 19, 6, 21, 9, 13,
	7, 11, 8, 10, 14, 12, 16, 5, 15,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 4, 1, 1, 1,
	1, 1, 7, 4, 4, 4, 8, 2, 1,
}

var yyChk = [...]int{
	-1000, -22, -1, -6, -7, -9, -13, -11, -4, -5,
	-15, -16, 14, -8, -10, -14, -12, 6, 7, 25,
	26, 17, 22, 23, 24, -23, 29, 15, -2, -17,
	8, 13, 12, 11, 20, 9, 21, -3, -17, 18,
	18, 18, 18, 18, 16, 19, 19, 19, 19, 19,
	-18, 4, -21, 4, -20, 4, -21, -21, -21, 28,
	-20, -21, -19, 4, 27, -21, -20,
}

var yyDef = [...]int{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 0, 30, 28, 29, 31, 0, 0, 38,
	0, 0, 0, 0, 0, 1, 3, 0, 22, 20,
	13, 14, 15, 16, 17, 18, 19, 37, 21, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	26, 23, 0, 27, 0, 24, 33, 34, 35, 0,
	0, 0, 0, 25, 0, 32, 36,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 29,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line yacc/spqrparser/sql.y:82
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:83
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:88
		{
			setParseTree(yylex, yyDollar[1].sh_col)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:92
		{
			setParseTree(yylex, yyDollar[1].kr)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:96
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:100
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:104
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:108
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:112
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:116
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:120
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:135
		{
			switch v := string(yyDollar[1].str); v {
			case ShowDatabasesStr, ShowPoolsStr, ShowShardsStr, ShowKeyRangesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:146
		{
			switch v := string(yyDollar[1].str); v {
			case KillClientsStr:
				yyVAL.str = v
			default:
				yyVAL.str = "unsupp"
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc/spqrparser/sql.y:158
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:165
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:171
		{
			yyVAL.int, _ = strconv.Atoi(string(yyDollar[1].str))
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:177
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/spqrparser/sql.y:183
		{
			yyVAL.sh_col = &ShardingColumn{ColName: yyDollar[4].str}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:189
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line yacc/spqrparser/sql.y:207
		{
			yyVAL.kr = &KeyRange{From: yyDollar[4].int, To: yyDollar[5].int, ShardID: yyDollar[6].str, KeyRangeID: yyDollar[7].str}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/spqrparser/sql.y:213
		{
			yyVAL.drop = &Drop{KeyRangeID: yyDollar[4].str}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/spqrparser/sql.y:219
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[4].str}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/spqrparser/sql.y:225
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[4].str}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line yacc/spqrparser/sql.y:232
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[4].str, KeyRangeFromID: yyDollar[6].str, Border: yyDollar[8].int}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc/spqrparser/sql.y:238
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/spqrparser/sql.y:244
		{
			yyVAL.shutdown = &Shutdown{}
		}
	}
	goto yystack /* stack new state and value */
}
