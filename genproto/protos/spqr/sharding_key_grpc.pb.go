// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package spqr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShardingKeyServiceClient is the client API for ShardingKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardingKeyServiceClient interface {
	AddShardingKey(ctx context.Context, in *AddShardingKeyRequest, opts ...grpc.CallOption) (*AddShardingKeyReply, error)
}

type shardingKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShardingKeyServiceClient(cc grpc.ClientConnInterface) ShardingKeyServiceClient {
	return &shardingKeyServiceClient{cc}
}

func (c *shardingKeyServiceClient) AddShardingKey(ctx context.Context, in *AddShardingKeyRequest, opts ...grpc.CallOption) (*AddShardingKeyReply, error) {
	out := new(AddShardingKeyReply)
	err := c.cc.Invoke(ctx, "/yandex.router.ShardingKeyService/AddShardingKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardingKeyServiceServer is the server API for ShardingKeyService service.
// All implementations must embed UnimplementedShardingKeyServiceServer
// for forward compatibility
type ShardingKeyServiceServer interface {
	AddShardingKey(context.Context, *AddShardingKeyRequest) (*AddShardingKeyReply, error)
	mustEmbedUnimplementedShardingKeyServiceServer()
}

// UnimplementedShardingKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShardingKeyServiceServer struct {
}

func (UnimplementedShardingKeyServiceServer) AddShardingKey(context.Context, *AddShardingKeyRequest) (*AddShardingKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShardingKey not implemented")
}
func (UnimplementedShardingKeyServiceServer) mustEmbedUnimplementedShardingKeyServiceServer() {}

// UnsafeShardingKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardingKeyServiceServer will
// result in compilation errors.
type UnsafeShardingKeyServiceServer interface {
	mustEmbedUnimplementedShardingKeyServiceServer()
}

func RegisterShardingKeyServiceServer(s grpc.ServiceRegistrar, srv ShardingKeyServiceServer) {
	s.RegisterService(&ShardingKeyService_ServiceDesc, srv)
}

func _ShardingKeyService_AddShardingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShardingKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardingKeyServiceServer).AddShardingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.router.ShardingKeyService/AddShardingKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardingKeyServiceServer).AddShardingKey(ctx, req.(*AddShardingKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardingKeyService_ServiceDesc is the grpc.ServiceDesc for ShardingKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardingKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.router.ShardingKeyService",
	HandlerType: (*ShardingKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShardingKey",
			Handler:    _ShardingKeyService_AddShardingKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/router/sharding_key.proto",
}
