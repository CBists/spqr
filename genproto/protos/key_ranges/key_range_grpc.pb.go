// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package key_ranges

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyRangeServiceClient is the client API for KeyRangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyRangeServiceClient interface {
	ListKeyRange(ctx context.Context, in *KeyRangeRequest, opts ...grpc.CallOption) (*KeyRangeReply, error)
}

type keyRangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyRangeServiceClient(cc grpc.ClientConnInterface) KeyRangeServiceClient {
	return &keyRangeServiceClient{cc}
}

func (c *keyRangeServiceClient) ListKeyRange(ctx context.Context, in *KeyRangeRequest, opts ...grpc.CallOption) (*KeyRangeReply, error) {
	out := new(KeyRangeReply)
	err := c.cc.Invoke(ctx, "/yandex.spqr.key_ranges.KeyRangeService/ListKeyRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyRangeServiceServer is the server API for KeyRangeService service.
// All implementations must embed UnimplementedKeyRangeServiceServer
// for forward compatibility
type KeyRangeServiceServer interface {
	ListKeyRange(context.Context, *KeyRangeRequest) (*KeyRangeReply, error)
	mustEmbedUnimplementedKeyRangeServiceServer()
}

// UnimplementedKeyRangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyRangeServiceServer struct {
}

func (UnimplementedKeyRangeServiceServer) ListKeyRange(context.Context, *KeyRangeRequest) (*KeyRangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyRange not implemented")
}
func (UnimplementedKeyRangeServiceServer) mustEmbedUnimplementedKeyRangeServiceServer() {}

// UnsafeKeyRangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyRangeServiceServer will
// result in compilation errors.
type UnsafeKeyRangeServiceServer interface {
	mustEmbedUnimplementedKeyRangeServiceServer()
}

func RegisterKeyRangeServiceServer(s grpc.ServiceRegistrar, srv KeyRangeServiceServer) {
	s.RegisterService(&KeyRangeService_ServiceDesc, srv)
}

func _KeyRangeService_ListKeyRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyRangeServiceServer).ListKeyRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.spqr.key_ranges.KeyRangeService/ListKeyRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyRangeServiceServer).ListKeyRange(ctx, req.(*KeyRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyRangeService_ServiceDesc is the grpc.ServiceDesc for KeyRangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyRangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.spqr.key_ranges.KeyRangeService",
	HandlerType: (*KeyRangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKeyRange",
			Handler:    _KeyRangeService_ListKeyRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/key_ranges/key_range.proto",
}
