// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shards

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShardSerivceClient is the client API for ShardSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardSerivceClient interface {
	// Sends a greeting
	ListShards(ctx context.Context, in *ShardRequest, opts ...grpc.CallOption) (*ShardReply, error)
}

type shardSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewShardSerivceClient(cc grpc.ClientConnInterface) ShardSerivceClient {
	return &shardSerivceClient{cc}
}

func (c *shardSerivceClient) ListShards(ctx context.Context, in *ShardRequest, opts ...grpc.CallOption) (*ShardReply, error) {
	out := new(ShardReply)
	err := c.cc.Invoke(ctx, "/yandex.shgo.shards.ShardSerivce/ListShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardSerivceServer is the server API for ShardSerivce service.
// All implementations must embed UnimplementedShardSerivceServer
// for forward compatibility
type ShardSerivceServer interface {
	// Sends a greeting
	ListShards(context.Context, *ShardRequest) (*ShardReply, error)
	mustEmbedUnimplementedShardSerivceServer()
}

// UnimplementedShardSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedShardSerivceServer struct {
}

func (UnimplementedShardSerivceServer) ListShards(context.Context, *ShardRequest) (*ShardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShards not implemented")
}
func (UnimplementedShardSerivceServer) mustEmbedUnimplementedShardSerivceServer() {}

// UnsafeShardSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardSerivceServer will
// result in compilation errors.
type UnsafeShardSerivceServer interface {
	mustEmbedUnimplementedShardSerivceServer()
}

func RegisterShardSerivceServer(s grpc.ServiceRegistrar, srv ShardSerivceServer) {
	s.RegisterService(&ShardSerivce_ServiceDesc, srv)
}

func _ShardSerivce_ListShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardSerivceServer).ListShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.shgo.shards.ShardSerivce/ListShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardSerivceServer).ListShards(ctx, req.(*ShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardSerivce_ServiceDesc is the grpc.ServiceDesc for ShardSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.shgo.shards.ShardSerivce",
	HandlerType: (*ShardSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListShards",
			Handler:    _ShardSerivce_ListShards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shard.proto",
}
